# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.TProactor
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.TProactor
DEPENDENCY_FILE  = .depend.TProactor

LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)TProactor.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)TProactor

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)TProactor.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

FILES = \
  Asynch_Acceptor2.cpp \
  Asynch_Connector2.cpp \
  Asynch_File_Transmitter.cpp \
  Asynch_IO.cpp \
  Asynch_IO_Impl.cpp \
  POSIX_AIO_Config.cpp \
  POSIX_AIO_Dev_Poll_Provider.cpp \
  POSIX_AIO_Dispatcher.cpp \
  POSIX_AIO_Emulation.cpp \
  POSIX_AIO_Emulation_Provider.cpp \
  POSIX_AIO_Event_Poll_Provider.cpp \
  POSIX_AIO_FD_Info.cpp \
  POSIX_AIO_Kqueue_Provider.cpp \
  POSIX_AIO_LINUX_NAIO_Provider.cpp \
  POSIX_AIO_Poll_Provider.cpp \
  POSIX_AIO_Processor.cpp \
  POSIX_AIO_Provider.cpp \
  POSIX_AIO_STD_Provider.cpp \
  POSIX_AIO_SUN_Port_Provider.cpp \
  POSIX_AIO_SUN_Provider.cpp \
  POSIX_AIO_Select_Provider.cpp \
  POSIX_Asynch_IO.cpp \
  POSIX_Proactor.cpp \
  Proactor.cpp \
  Proactor_Impl.cpp \
  Sock_Addr.cpp \
  WIN32_Asynch_IO.cpp \
  WIN32_Proactor.cpp


LIBPATHS := /usr/lib "../lib" "$(ACE_ROOT)/lib" "$(ACE_ROOT)/ace"

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lACE -laio

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/TProactor
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    ifeq ($(LIBCHECK_PREFIX),)
      # If the user hasn't specified a place to look for installed libraries, let's set
      # a reasonable default
      LIBCHECK_PREFIX = /usr
    endif
    LIBCHECK ?= $(filter-out $(foreach lib,ACE aio,$(findstring $(lib),$(foreach libpath,/usr/lib $(if $(ARCH),/usr/lib/$(ARCH)) ../lib $(if $(ARCH),../lib/$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) $(ACE_ROOT)/ace $(if $(ARCH),$(ACE_ROOT)/ace/$(ARCH)) $(LIBCHECK_PREFIX)/lib $(LIBCHECK_PREFIX)/lib64 $(LIBCHECK_EXTRA_PATHS) $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),ACE aio)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L/usr/lib -L../lib -L$(ACE_ROOT)/lib -L$(ACE_ROOT)/ace
else
LDFLAGS      += -L/usr/lib $(if $(ARCH),-L/usr/lib/$(ARCH)) -L../lib $(if $(ARCH),-L../lib/$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L$(ACE_ROOT)/ace $(if $(ARCH),-L$(ACE_ROOT)/ace/$(ARCH))
endif
CPPFLAGS     += -I.. -I$(ACE_ROOT)
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DTPROACTOR_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo TProactor will not be built due to the following missing library: $(LIBCHECK) >&2



realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
UNAME := $(shell uname)
ifeq ($(UNAME), HP-UX)
LDFLAGS += -Wl,+s,+b,$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
else
ifeq ($(UNAME), Darwin)
LDFLAGS += -Wl,-rpath $(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
else
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif
endif
endif


